// Copyright (c) 2024 artegoser (Artemy Egorov)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  email     String @unique
  publicKey String @unique
  name      String

  blocked  Boolean @default(false)
  approved Boolean

  accounts       Account[]
  SmartContracts SmartContract[]
}

model Account {
  id             String @id @default(cuid())
  name           String @unique
  description    String @default("")
  currencySymbol String
  balance        Float
  userId         String

  blocked Boolean @default(false)

  User                 User          @relation(fields: [userId], references: [id])
  transactionSender    Transaction[] @relation("TransactionSender")
  transactionRecipient Transaction[] @relation("TransactionRecipient")
  currency             Currency      @relation(fields: [currencySymbol], references: [symbol])
}

model Transaction {
  id     String @id @default(cuid())
  amount Float
  type   String
  from   String
  to     String

  signature String
  salt      String @unique

  comment String   @default("")
  date    DateTime @default(now())

  sender    Account @relation(name: "TransactionSender", fields: [from], references: [id])
  recipient Account @relation(name: "TransactionRecipient", fields: [to], references: [id])
}

model Currency {
  symbol      String @id
  name        String @unique
  description String
  type        String @default("fiat")

  Accounts Account[]
}

model SmartContract {
  id String @id @default(cuid())

  name        String
  description String
  code        String
  authorId    String

  signature String

  author              User                       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  SmartContractMemory SmartContractGlobalMemory?
}

model SmartContractGlobalMemory {
  smartContractId String @unique
  value           String @default("{}")

  SmartContract SmartContract @relation(fields: [smartContractId], references: [id], onDelete: Cascade)
}
