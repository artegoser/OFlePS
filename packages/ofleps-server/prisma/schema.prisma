// Copyright (c) 2024 artegoser (Artemy Egorov)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  pk String @id

  email String @unique
  name  String

  blocked  Boolean @default(false)
  approved Boolean

  accounts       Account[]
  SmartContracts SmartContract[]
}

model Account {
  id             String @id @default(cuid())
  name           String
  description    String @default("")
  currencySymbol String
  balance        Float  @default(0)
  userPk         String

  blocked Boolean @default(false)

  User     User     @relation(fields: [userPk], references: [pk])
  Currency Currency @relation(fields: [currencySymbol], references: [symbol])

  transactionsSender    Transaction[] @relation("TransactionSender")
  transactionsRecipient Transaction[] @relation("TransactionRecipient")

  Orders       Order[] @relation("OrderAccount")
  returnOrders Order[] @relation("OrderReturnAccount")
}

model Transaction {
  id             String @id @default(cuid())
  amount         Float
  type           String
  currencySymbol String

  from String
  to   String

  comment String   @default("")
  date    DateTime @default(now())

  sender    Account @relation(name: "TransactionSender", fields: [from], references: [id])
  recipient Account @relation(name: "TransactionRecipient", fields: [to], references: [id])

  Currency Currency @relation(fields: [currencySymbol], references: [symbol])
}

model Currency {
  symbol      String @id
  name        String @unique
  description String
  type        String @default("fiat")

  Accounts Account[]

  OrdersFrom Order[] @relation("OrderFrom")
  OrdersTo   Order[] @relation("OrderTo")

  CompleteOrderFrom CompleteOrder[] @relation("CompleteOrderFrom")
  CompleteOrderTo   CompleteOrder[] @relation("CompleteOrderTo")
  Transaction       Transaction[]
}

model Order {
  id   String   @id @default(cuid())
  date DateTime @default(now())

  accountId       String
  returnAccountId String

  quantity Float
  price    Float

  type Boolean /// true - buy, false - sell

  fromCurrencySymbol String
  toCurrencySymbol   String

  fromCurrency Currency @relation(name: "OrderFrom", fields: [fromCurrencySymbol], references: [symbol])
  toCurrency   Currency @relation(name: "OrderTo", fields: [toCurrencySymbol], references: [symbol])

  Account       Account @relation(name: "OrderAccount", fields: [accountId], references: [id])
  returnAccount Account @relation(name: "OrderReturnAccount", fields: [returnAccountId], references: [id])
}

model CompleteOrder {
  date DateTime @default(now())

  price              Float
  quantity           Float
  fromCurrencySymbol String
  toCurrencySymbol   String

  fromCurrency Currency @relation(name: "CompleteOrderFrom", fields: [fromCurrencySymbol], references: [symbol])
  toCurrency   Currency @relation(name: "CompleteOrderTo", fields: [toCurrencySymbol], references: [symbol])

  @@unique([fromCurrencySymbol, toCurrencySymbol])
}

model SmartContract {
  id String @id @default(cuid())

  name        String
  description String
  code        String
  authorPk    String

  signature String

  author              User                       @relation(fields: [authorPk], references: [pk], onDelete: Cascade)
  SmartContractMemory SmartContractGlobalMemory?
}

model SmartContractGlobalMemory {
  smartContractId String @unique
  value           String @default("{}")

  SmartContract SmartContract @relation(fields: [smartContractId], references: [id], onDelete: Cascade)
}
